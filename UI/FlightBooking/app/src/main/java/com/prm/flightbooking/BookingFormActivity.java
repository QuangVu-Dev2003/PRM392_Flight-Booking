package com.prm.flightbooking;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Build;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ImageButton;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.NotificationCompat;

import com.google.android.material.textfield.TextInputEditText;
import com.prm.flightbooking.api.ApiServiceProvider;
import com.prm.flightbooking.api.BookingApiEndpoint;
import com.prm.flightbooking.dto.booking.BookingResponseDto;
import com.prm.flightbooking.dto.booking.BookingSeatDto;
import com.prm.flightbooking.dto.booking.CreateBookingDto;
import com.prm.flightbooking.dto.seat.SelectedSeatInfo;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class BookingFormActivity extends AppCompatActivity {

    private TextInputEditText etNotes;
    private TextView tvBookingSummary, tvTotalPrice;
    private Button btnBook;
    private CheckBox cbTerms;
    private ProgressBar progressBar;
    private ImageButton btnBack;
    private BookingApiEndpoint bookingApi;
    private SharedPreferences sharedPreferences;
    private List<SelectedSeatInfo> selectedSeatsList;
    private int flightId, userId;
    private int notificationId = 1000;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_booking_form);

        // Kh·ªüi t·∫°o API v√† SharedPreferences
        bookingApi = ApiServiceProvider.getBookingApi();
        sharedPreferences = getSharedPreferences("user_prefs", MODE_PRIVATE);

        // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
        if (!validateSessionData()) {
            return;
        }

        bindingView();
        bindingAction();
        displayBookingSummary();
    }

    // Li√™n k·∫øt c√°c view trong layout
    private void bindingView() {
        btnBack = findViewById(R.id.btn_back);
        etNotes = findViewById(R.id.et_notes);
        tvBookingSummary = findViewById(R.id.tv_booking_summary);
        tvTotalPrice = findViewById(R.id.tv_total_price);
        btnBook = findViewById(R.id.btn_book);
        cbTerms = findViewById(R.id.cb_terms);
        progressBar = findViewById(R.id.progress_bar);
    }

    // G√°n s·ª± ki·ªán cho c√°c view
    private void bindingAction() {
        btnBack.setOnClickListener(v -> finish());
        btnBook.setOnClickListener(this::onBtnBookClick);
    }

    // X·ª≠ l√Ω khi nh·∫•n n√∫t ƒë·∫∑t v√©
    private void onBtnBookClick(View view) {
        performBooking();
    }

    // Ki·ªÉm tra d·ªØ li·ªáu phi√™n l√†m vi·ªác
    private boolean validateSessionData() {
        selectedSeatsList = (List<SelectedSeatInfo>) getIntent().getSerializableExtra("selectedSeatsList");
        flightId = sharedPreferences.getInt("flightId", -1);
        userId = sharedPreferences.getInt("user_id", -1);

        if (flightId == -1 || userId <= 0 || selectedSeatsList == null || selectedSeatsList.isEmpty()) {
            Toast.makeText(this, "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ch·ªçn gh·∫ø", Toast.LENGTH_SHORT).show();
            finish();
            return false;
        }
        return true;
    }

    // Hi·ªÉn th·ªã t√≥m t·∫Øt th√¥ng tin ƒë·∫∑t v√©
    private void displayBookingSummary() {
        StringBuilder summary = new StringBuilder();
        BigDecimal overallTotalPrice = BigDecimal.ZERO;
        summary.append("Th√¥ng tin ƒë·∫∑t v√©:\n\n");

        // Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng gh·∫ø
        for (int i = 0; i < selectedSeatsList.size(); i++) {
            SelectedSeatInfo seat = selectedSeatsList.get(i);
            summary.append("üîµ Gh·∫ø s·ªë: ")
                    .append(seat.getSeatNumber())
                    .append(" (").append(seat.getSeatClassName()).append(")\n");
            summary.append("   - H√†nh kh√°ch: ").append(seat.getPassengerName()).append("\n");
            summary.append("   - CMND/CCCD: ").append(seat.getPassengerIdNumber()).append("\n");

            if (seat.getTotalPrice() != null) {
                String seatFormattedPrice = formatCurrency(seat.getTotalPrice());
                summary.append("   - Gi√° gh·∫ø: ").append(seatFormattedPrice).append("\n"); // Hi·ªÉn th·ªã gi√° t·ª´ng gh·∫ø
                overallTotalPrice = overallTotalPrice.add(seat.getTotalPrice()); // V·∫´n c·ªông v√†o t·ªïng ƒë·ªÉ hi·ªÉn th·ªã ·ªü tvTotalPrice
            } else {
                summary.append("   - Gi√° gh·∫ø: N/A\n"); // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p gi√° kh√¥ng c√≥
            }

            // Th√™m d·∫•u ph√¢n c√°ch gi·ªØa c√°c gh·∫ø n·∫øu kh√¥ng ph·∫£i gh·∫ø cu·ªëi c√πng
            if (i < selectedSeatsList.size() - 1) {
                summary.append("-----------------------------------------------------\n");
            }
        }

        summary.append("\nüìä T·ªïng s·ªë gh·∫ø ƒë√£ ch·ªçn: ")
                .append(selectedSeatsList.size()).append(" gh·∫ø");

        String overallFormattedPrice = formatCurrency(overallTotalPrice);

        tvBookingSummary.setText(summary.toString());
        tvTotalPrice.setText(overallFormattedPrice);
    }

    // ƒê·ªãnh d·∫°ng ti·ªÅn t·ªá Vi·ªát Nam
    private String formatCurrency(BigDecimal amount) {
        DecimalFormatSymbols symbols = new DecimalFormatSymbols(new Locale("vi", "VN"));
        symbols.setGroupingSeparator('.');
        DecimalFormat decimalFormat = new DecimalFormat("#,###", symbols);
        return decimalFormat.format(amount) + " VNƒê";
    }

    // Th·ª±c hi·ªán ƒë·∫∑t v√©
    private void performBooking() {
        if (!validateBookingInput()) {
            return;
        }

        // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang x·ª≠ l√Ω
        setBookingInProgress(true);

        // T·∫°o d·ªØ li·ªáu ƒë·∫∑t v√©
        CreateBookingDto bookingDto = createBookingData();

        // G·ªçi API ƒë·∫∑t v√©
        Call<BookingResponseDto> call = bookingApi.createBooking(bookingDto);
        call.enqueue(new Callback<BookingResponseDto>() {
            @Override
            public void onResponse(Call<BookingResponseDto> call, Response<BookingResponseDto> response) {
                setBookingInProgress(false);

                if (response.isSuccessful() && response.body() != null) {
                    handleBookingSuccess(response.body());
                } else {
                    handleErrorResponse(response);
                }
            }

            @Override
            public void onFailure(Call<BookingResponseDto> call, Throwable t) {
                setBookingInProgress(false);
                Toast.makeText(BookingFormActivity.this, "L·ªói k·∫øt n·ªëi: " + t.getMessage(), Toast.LENGTH_SHORT).show();
            }
        });
    }

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    private boolean validateBookingInput() {
        if (!cbTerms.isChecked()) {
            Toast.makeText(this, "Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán", Toast.LENGTH_SHORT).show();
            return false;
        }
        return true;
    }

    // T·∫°o d·ªØ li·ªáu ƒë·∫∑t v√©
    private CreateBookingDto createBookingData() {
        String notes = etNotes.getText().toString().trim();
        if (notes.isEmpty()) {
            notes = "Kh√¥ng c√≥ y√™u c·∫ßu ƒë·∫∑c bi·ªát";
        }

        List<BookingSeatDto> seats = new ArrayList<>();
        for (SelectedSeatInfo info : selectedSeatsList) {
            BookingSeatDto seatDto = new BookingSeatDto(
                    info.getSeatId(),
                    info.getPassengerName(),
                    info.getPassengerIdNumber()
            );
            seats.add(seatDto);
        }

        return new CreateBookingDto(userId, flightId, seats, notes);
    }

    // Thi·∫øt l·∫≠p tr·∫°ng th√°i ƒëang x·ª≠ l√Ω
    private void setBookingInProgress(boolean inProgress) {
        progressBar.setVisibility(inProgress ? View.VISIBLE : View.GONE);
        btnBook.setEnabled(!inProgress);
        btnBook.setText(inProgress ? "ƒêang x·ª≠ l√Ω..." : "X√ÅC NH·∫¨N ƒê·∫∂T V√â");
    }

    // X·ª≠ l√Ω khi ƒë·∫∑t v√© th√†nh c√¥ng
    private void handleBookingSuccess(BookingResponseDto bookingResponse) {
        String bookingReference = bookingResponse.getBookingReference();
        int bookingId = bookingResponse.getBookingId();
        String successMessage = "ƒê·∫∑t v√© th√†nh c√¥ng! M√£ tham chi·∫øu: " + bookingReference;

        Toast.makeText(this, successMessage, Toast.LENGTH_LONG).show();

        // G·ª≠i th√¥ng b√°o
        sendBookingSuccessNotification(bookingReference, bookingId);

        // Chuy·ªÉn v·ªÅ m√†n h√¨nh ch√≠nh
        navigateToMainMenu();
    }

    // X·ª≠ l√Ω l·ªói t·ª´ server
    private void handleErrorResponse(Response<BookingResponseDto> response) {
        String errorMessage = "ƒê·∫∑t v√© th·∫•t b·∫°i";

        if (response.code() == 400) {
            errorMessage = "Th√¥ng tin ƒë·∫∑t v√© kh√¥ng h·ª£p l·ªá";
        } else if (response.code() == 404) {
            errorMessage = "Kh√¥ng t√¨m th·∫•y chuy·∫øn bay ho·∫∑c gh·∫ø";
        } else if (response.code() == 409) {
            errorMessage = "Gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t b·ªüi ng∆∞·ªùi kh√°c";
        } else if (response.code() >= 500) {
            errorMessage = "L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau";
        }

        Toast.makeText(this, errorMessage, Toast.LENGTH_SHORT).show();
    }

    // G·ª≠i th√¥ng b√°o ƒë·∫∑t v√© th√†nh c√¥ng
    private void sendBookingSuccessNotification(String bookingReference, int bookingId) {
        String channelId = "BookingChannelId";
        String channelName = "Th√¥ng b√°o ƒë·∫∑t v√©";

        NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);

        // T·∫°o k√™nh th√¥ng b√°o cho Android 8.0 tr·ªü l√™n
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel channel = new NotificationChannel(
                    channelId,
                    channelName,
                    NotificationManager.IMPORTANCE_HIGH
            );
            notificationManager.createNotificationChannel(channel);
        }

        // T·∫°o intent khi nh·∫•n v√†o th√¥ng b√°o
        Intent intent = new Intent(this, BookingDetailActivity.class);
        intent.putExtra("bookingId", bookingId);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);

        PendingIntent pendingIntent = PendingIntent.getActivity(
                this,
                bookingId,
                intent,
                PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_MUTABLE
        );

        // X√¢y d·ª±ng th√¥ng b√°o
        Notification notification = new NotificationCompat.Builder(this, channelId)
                .setContentTitle("ƒê·∫∑t v√© th√†nh c√¥ng")
                .setContentText("M√£ ƒë·∫∑t ch·ªó: " + bookingReference)
                .setSmallIcon(R.drawable.ic_notifications)
                .setAutoCancel(true)
                .setContentIntent(pendingIntent)
                .setStyle(new NotificationCompat.BigTextStyle()
                        .bigText("M√£ ƒë·∫∑t ch·ªó: " + bookingReference))
                .build();

        notificationManager.notify(notificationId++, notification);
    }

    // Chuy·ªÉn v·ªÅ m√†n h√¨nh ch√≠nh
    private void navigateToMainMenu() {
        Intent intent = new Intent(this, MainMenuActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(intent);
        finish();
    }
}